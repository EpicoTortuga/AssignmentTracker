/* ----------------------------------- */
/*       PASTE YOUR CODE HERE!         */
/* Delete and replace this whole block */
/* ----------------------------------- */

var params = {
  
  backgroundColor : "1c1c1c",
  dateFormat : "EEEE, MMM dd",
  
  hasProfilePic : true,
  picSize : 28,
  
  bigStackSize : 30,
  bigDateSize : 20,
  
  indentLength : 10,
  upperPadding : 0,
  
  assyStackSize : 40,
  assyTextSize : 14,
  assySymbolSize : 35,
  assyTimeSize : 7,
  assyClassSize : 7,
  
  remainStackSize : 20,
  remainTextSize : 14,
  remainSymbolSize : 23
}
  

function getWidgetSizeInPoint(widgetSize = (config.runsInWidget ? config.widgetFamily : null)) {
  const devSize = `${Device.screenSize().width}x${Device.screenSize().height}`
  const sizeMap = {
    // 12 Pro Max
    '428x896': { small: [170, 170], medium: [364, 170], large: [364, 382] },  
    // 12, 12 Pro
    '390x844': { small: [158, 158], medium: [338, 158], large: [338, 354] },
    // XR, 11, 11 Pro Max
    '414x896': { small: [169, 169], medium: [360, 169], large: [360, 376] },
    // X, XS, 11 Pro
    '375x812': { small: [155, 155], medium: [329, 155], large: [329, 345] },
    // 6/7/8(S) Plus
    '414x736': { small: [159, 159], medium: [348, 159], large: [348, 357] },
    // 6/7/8(S) and 2nd Gen SE
    '375x667': { small: [148, 148], medium: [322, 148], large: [322, 324] },
    // 1st Gen SE
    '320x568': { small: [141, 141], medium: [291, 141], large: [291, 299] }
  }
  let widgetSizeInPoint = null

  if (widgetSize) {
    let mappedSize = sizeMap[devSize]
    if (mappedSize) {
      widgetSizeInPoint = new Size(...mappedSize[widgetSize])
    }
  }
  return widgetSizeInPoint
}

function findByProperty(property, value) {
    return function(currentValue) {
      return value === currentValue[property]      
  }
}

var prefixes = []

for (const prop in classes) {
  let temp = classes[prop].prefix
  if (!prefixes.includes(temp))
    prefixes.push(temp)
}

let dateC = new DateFormatter()
dateC.dateFormat = "yyyyMMdd"
let today = parseInt(dateC.string(new Date()))

var json = [];

for (const prop in prefixes) {
  
  let prefix = prefixes[prop]

  let api = new Request(prefix + ".instructure.com/api/v1/users/self/todo?per_page=30")
  
  api.method = "GET"
  
  api.headers = {"Authorization" : "Bearer " + auth}
  
  let tempJson = await api.loadJSON();
  
  for (let j = 0; j < tempJson.length; j++) {
    
    if (tempJson[j] !== null) {
      
    temp = tempJson[j].assignment
    let tempDate = new Date(temp.due_at)
    let checkDate = parseInt(dateC.string(tempDate))
    
    
    if (today <= checkDate) {
      let o = classes.find(findByProperty("code", temp.course_id)).order
      
      let temp2 = {
        name : temp.name,
        date : temp.due_at,
        day : tempDate.getDate(),
        order : o,
        url : temp.html_url
      } 
      
      json.push(temp2)
    }  
  }  
 }
}

  let reach = new Request(prefixes[0] + ".instructure.com/api/v1/users/self/")  
  reach.method = "GET"
  reach.headers = {"Authorization" : "Bearer " + auth}
  let tempJson = await reach.loadJSON();
  
  let imgPage = new Request(tempJson.avatar_url)
  imgPage.method = "GET"
  
  var img = await imgPage.loadImage()


function sortByProperty(property, a, b) {
    if (a[property] > b[property])
      return 1;
    else if (a[property] < b[property])
      return -1;
      
    return 0;
}

json.sort(  
  function(a,b) {
    if (a.day === b.day)
      return sortByProperty("order", a, b)
    else
      return sortByProperty("date", a, b)
    }
);

function getFont(name, s) {
  if (name==="sbRound")
    return Font.semiboldRoundedSystemFont(s)
  if (name==="regular")
    return Font.regularSystemFont(s)
}

var todayDay = new Date().getDate()
var dateF = new DateFormatter()
dateF.useNoDateStyle()
dateF.useShortTimeStyle()
var dayW = new DateFormatter()
dayW.dateFormat = "EEEE"
var dayF = new DateFormatter()
dayF.dateFormat = params.dateFormat


const widget = new ListWidget()
widget.backgroundColor= new Color(params.backgroundColor)
var hasPfp = false

var size = getWidgetSizeInPoint("large")
var sizeCount = params.upperPadding

for (let prop = 0; prop < json.length; prop++) {
  
  let currA = json[prop]
  let currC = classes[currA.order]
  
  let name = currA.name
  let clss = currC.name
  let color = currC.color
  let date = dateF.string(new Date(currA.date))  
  let day = currA.day
  
  if (prop == 0 || day != json[prop-1].day) {
    if (sizeCount >= size.height-(params.bigStackSize+params.assyStackSize)) break;
    let today = widget.addStack()
    today.size = new Size(0,params.bigStackSize)
    sizeCount += params.bigStackSize;
    today.setPadding(params.upperPadding, 0, 0, 0)
    today.centerAlignContent()
    if (day === todayDay)                   
      var todayTxt = today.addText("Today")
    else if (day === todayDay+1)
      var todayTxt= today.addText("Tomorrow")
    else if ((day-todayDay) <= 5)
      var todayTxt = today.addText(dayW.string(new Date(currA.date)))
    else
      var todayTxt = today.addText(dayF.string(new Date(currA.date)))  
    todayTxt.font = getFont("sbRound",params.bigDateSize)  
    if (!hasPfp && params.hasProfilePic) {
      hasPfp = true;
      today.addSpacer()
      let pfp = today.addImage(img)
      pfp.imageSize = new Size(params.picSize,params.picSize)
      pfp.cornerRadius = 14
      pfp.url = prefixes[0] + ".instructure.com/"
    }
  }
  
  if (typeof json[prop+1] != 'undefined') {
    let dateRn = dateC.string(new Date(currA))
    let dateNxt = dateC.string(new Date(json[prop+1]))
    if ((dateRn === dateNxt) && (sizeCount >= (size.height-(2*params.assyStackSize)))) {
      
      let tot = 0
      for (let i = prop; i<json.length; i++) {
          if (day === json[i].day) 
          tot ++
        else
          break
      }
      
      widget.addSpacer(3)
      let remainingStack = widget.addStack()
      remainingStack.centerAlignContent()
      remainingStack.size= new Size(0, params.remainStackSize)  
      remainingStack.url = prefixes[0] + ".instructure.com/"
      
      remainingStack.addSpacer(params.indentLength+3)
      let rmnSymb = remainingStack.addText("\u007C")
      rmnSymb.font = getFont("sbRound", params.remainSymbolSize)
      rmnSymb.textColor = Color.gray()
      
      remainingStack.addSpacer(2)
      let vertStack = remainingStack.addStack()
      vertStack.layoutVertically()
      vertStack.setPadding(2, 0, 0, 0)
      vertStack.addSpacer()
      let s = "s"
      if (tot === 1) s=""
      let remainTxt = vertStack.addText(tot + " more assignment" + s)    
      remainTxt.font = getFont("sbRound",params.remainTextSize)  
      remainTxt.textColor = Color.gray()
      vertStack.addSpacer()
      break;
  }
}
  
  let stack = widget.addStack()
  stack.url = currA.url
  stack.centerAlignContent()
  stack.size = new Size(0, params.assyStackSize)
  sizeCount += params.assyStackSize;
  stack.addSpacer(params.indentLength)
  let divSymb = stack.addText("\u007C")
  divSymb.font = getFont("sbRound", params.assySymbolSize)
  divSymb.textColor = color
  
  let rightStack = stack.addStack()
  rightStack.layoutVertically()
  rightStack.setPadding(5, 0, 0, 0)
  let upperStack = rightStack.addStack()
  let nameTxt = upperStack.addText(name)
  nameTxt.font = getFont("sbRound", params.assyTextSize)
  nameTxt.lineLimit = 1
  upperStack.addSpacer()
  let underStack = rightStack.addStack()
  underStack.centerAlignContent()
  let dateTxt = underStack.addText(date + " â€¢ " )
  dateTxt.font = getFont("sbRound", params.assyTimeSize)
  let classTxt = underStack.addText(clss)
  classTxt.font = getFont("sbRound",params.assyClassSize)
  classTxt.textColor = color
  //classTxt.textOpacity = 0.75
  
  
  if (sizeCount >= size.height-params.assyStackSize) 
    break;
}

//widget.addSpacer()
widget.presentLarge()
Script.setWidget(widget)
